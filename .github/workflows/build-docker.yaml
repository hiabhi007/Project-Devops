name: Docker Build and Push with Trivy Scan and helm deployement

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

permissions:
  security-events: write

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2


    - name: Build Docker image
      run: |
        docker build . -t docker.io/${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} 

    - name: Check image tag
      run: |
       echo "Using image: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}"

    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@0.28.0 # use latest stable
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}'
        format: 'sarif'
        output: trivy-results.sarif
        exit-code: '0'  # do not fail even if vulnerabilities exist

    - name: Upload Trivy scan results to GitHub Security tab
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif  

    - name: Show SARIF file contents
      run: cat trivy-results.sarif 


    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  
        password: ${{ secrets.DOCKER_HUB_TOKEN }}  

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

    - name: Save Git SHA to file
      run: echo "${{ github.sha }}" > image-tag.txt

    - name: Upload image tag artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image-tag.txt

  
  helm-deploy:
    needs: docker-build-push
    runs-on: self-hosted  # This must be the machine where Minikube is running

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Uninstall previous Helm release (if exists)
        run: |
          try {
           helm status myapp --namespace default 2>$null
           $releaseExists = $LASTEXITCODE -eq 0
           } catch {
           $releaseExists = $false
          }

          if ($releaseExists) {
          Write-Host "Release 'myapp' found, uninstalling..."
           helm uninstall myapp --namespace default
           } else {
          Write-Host "No existing release 'myapp' to uninstall"
          }
          exit 0

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
         name: image-tag

      - name: Read image tag into environment variable
        id: read_tag
        run: |
         $tag = Get-Content 'image-tag.txt'
          echo "IMAGE_TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Deploy to Minikube using Helm
        run: |
         helm upgrade --install myapp ./mychart --set image.repository=docker.io/${{ secrets.DOCKER_USERNAME }}/myapp --set image.tag=${{ github.sha }}

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/myapp
          kubectl get pods -o wide

      - name: Clean up workspace
        run: |
          Remove-Item "$env:GITHUB_WORKSPACE\*" -Recurse -Force   

   